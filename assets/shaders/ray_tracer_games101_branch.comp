#version 460

// MARK: Config

#define EPS 0.001
#define PI 3.1415926

#define SPP 20
#define MAX_BOUNCES 15
#define ATTENUATION_STOP_EPS 0.05
#define RAY_T_MIN 0.01
#define RAY_T_MAX 10000.0
#define RR_PROBABILITY 0.8 // FIXME: High artifacts

#define IS_ENABLE_PATH_REUSE 1

#define MAX_LEN_MATERIAL_BUFFER 100
#define MAX_LEN_VERTEX_BUFFER 1000
#define MAX_LEN_FACE_BUFFER 1000
#define MAX_LEN_LUMINOUS_FACE_ID_BUFFER 100

#define MATERIAL_LAMBERTIAN 0
#define MATERIAL_METAL 1
#define MATERIAL_DIELECTRIC 2
#define MATERIAL_LIGHT 3

// MARK: Scene D.S.

layout(
    local_size_x = 8,
    local_size_y = 8,
    local_size_z = 1
) in;

// MARK: * Camera

struct Camera {
    vec3 position;
    vec3 up;
    vec3 forward;
    float t_near;
    float t_far;
    float vertical_fov;
};

layout(push_constant) uniform PushConstant {
    Camera camera;
    float time;
} push_constant_data;

Camera u_camera = push_constant_data.camera;
float u_time = push_constant_data.time;

// MARK: * Img & Lens

layout(set = 0, binding = 0) uniform writeonly image2D img; // 不能加rgba8，否则会因为格式不兼容而运行时错误

layout(set = 0, binding = 1) uniform LengthBuffer {
    uint materials_len;
    uint spheres_len;
    uint vertices_len;
    uint faces_len;
    uint luminous_sphere_id_len;
    uint luminous_face_id_len;
} lens;
uint materials_len = lens.materials_len;
uint vertices_len = lens.vertices_len;
uint faces_len = lens.faces_len;
uint luminous_face_id_len = lens.luminous_face_id_len;

// MARK: * Material

// albedo at index 0, because of aligement requirements
struct Material {
    vec3 albedo;
    uint ty;
    float fuzz;
    float refraction_ratio;
};

layout(set = 0, binding = 2) uniform MaterialBuffer {
    Material v[MAX_LEN_MATERIAL_BUFFER];
} materials;

// MARK: * Vertices

struct Vertex {
    vec3 position;
    vec3 normal;
};

layout(set = 0, binding = 4) buffer VertexBuffer {
    Vertex v[MAX_LEN_VERTEX_BUFFER];
} vertices;

// MARK: * Faces

struct Face {
    uvec3 indices;
    uint material_id;
};

layout(set = 0, binding = 5) buffer FaceBuffer {
    Face v[MAX_LEN_FACE_BUFFER];
} faces;

// MARK: * Luminous Face Id

layout(set = 0, binding = 7) uniform LuminousFaceIdBuffer {
    uint v[MAX_LEN_LUMINOUS_FACE_ID_BUFFER];
} luminous_face_id;


// MARK: Ray Tracing D.S.

struct Ray {
    vec3 origin;
    vec3 direction;
    float t_min;
    float t_max;
};

struct Intersection {
    float time;
    vec3 position;
    vec3 normal;
    // vec3 tangent;
    // vec3 bitangent;
    // vec2 tex_coord;
    // In Moer-Lite, there are a lot of dxxx, I don't know what it is.
    uint material_id;
    bool is_normal_outward;
};

// MARK: Func: Utils

float length2(in vec3 v) {
    return dot(v, v);
}

float degree_to_radian(in float degree) {
    return degree * PI / 180.0;
}

// MARK: Func: Random

// all random function's range is [0, 1)

// default random
// g_rand_seed should be near 1-100; And this constant should be useless, just a default value
float g_rand_seed = 19.260817;
float g_rand_index = 0.0; // to make a random sequence
void srand(float time, vec2 uv) {
    g_rand_seed = fract(fract(sin(time) * 43758.5453) + fract(sin(uv.x) * 22578.5453) + fract(sin(uv.y) * 114514.1919));
}
float _rand(float x) {
    return fract(sin(x) * 43758.5453);
}
float rand() {
    g_rand_index += 1.0;
    return _rand(g_rand_seed + g_rand_index);
}
vec2 rand2() {
    return vec2(rand(), rand());
}
vec3 rand3() {
    return vec3(rand(), rand(), rand());
}

// MARK: * Random with Seed

// specific seed random (input float)
float rand_v1(float seed) {
    return _rand(seed);
}
vec2 rand2_v1(float seed) {
    return vec2(rand_v1(seed), rand_v1(seed + 1.0));
}
vec3 rand3_v1(float seed) {
    return vec3(rand_v1(seed), rand_v1(seed + 1.0), rand_v1(seed + 2.0));
}

// specific seed random (input vec2)
float rand_v2(vec2 seed) {
    return _rand(dot(seed, vec2(12.9898, 78.233)));
}
vec2 rand2_v2(vec2 seed) {
    return vec2(rand_v2(seed), rand_v2(seed + vec2(1.0)));
}
vec3 rand3_v2(vec2 seed) {
    return vec3(rand_v2(seed), rand_v2(seed + vec2(1.0)), rand_v2(seed + vec2(2.0)));
}

// MARK: * Advanced Random
vec3 random_in_unit_sphere() {
    vec3 p;
    do {
        p = 2.0 * rand3() - vec3(1.0);
    } while(dot(p, p) >= 1.0);
    return p;
}

vec3 random_in_unit_sphere_surface() {
    return normalize(random_in_unit_sphere());
}

vec3 random_in_unit_hemisphere(in vec3 normal) {
    vec3 in_unit_sphere = random_in_unit_sphere();
    return dot(in_unit_sphere, normal) > 0.0 ? in_unit_sphere : -in_unit_sphere;
}

vec3 random_in_unit_hemisphere_surface(in vec3 normal) {
    return normalize(random_in_unit_hemisphere(normal));
}

// MARK: Func: Sample Ray
Ray sample_ray(in vec2 uv, in vec2 size) {
    float h = 2.0 * u_camera.t_near * tan(degree_to_radian(u_camera.vertical_fov / 2.0));
    float w = h * size.x / size.y;

    vec3 u = normalize(cross(u_camera.forward, u_camera.up)) * w; // right_dir with length
    vec3 v = normalize(cross(u_camera.forward, u)) * h; // down_dir with length

    vec3 pos = u_camera.position + u_camera.forward * u_camera.t_near;
    vec3 uv_pos = pos + u * (uv.x - 0.5) + v * (uv.y - 0.5);

    float t_coef = length(uv_pos - u_camera.position) / length(pos - u_camera.position);

    return Ray (
        u_camera.position,
        normalize(uv_pos - u_camera.position),
        u_camera.t_near * t_coef,
        u_camera.t_far * t_coef
    );
}

// MARK: * Triangle Mesh
bool is_intersect_with_face(
    in Ray ray,
    in Face face,
    out Intersection interaction
) {
    vec3 v0 = vertices.v[face.indices.x].position;
    vec3 v1 = vertices.v[face.indices.y].position;
    vec3 v2 = vertices.v[face.indices.z].position;

    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    vec3 s = ray.origin - v0;

    vec3 s1 = cross(ray.direction, e2);
    vec3 s2 = cross(s, e1);

    float f = 1.0 / (dot(s1, e1));
    float t = f * dot(s2, e2);
    float b1 = f * dot(s1, s);
    float b2 = f * dot(s2, ray.direction);

    if (b1 < 0 || 1 < b1 || b2 < 0 || 1 < b2 || 1 < b1 + b2) return false;
    if (t < ray.t_min || ray.t_max < t) return false;

    vec3 interpolated_normal = normalize(
        vertices.v[face.indices.x].normal * (1.0 - b1 - b2) +
        vertices.v[face.indices.y].normal * b1 +
        vertices.v[face.indices.z].normal * b2
    );

    interaction = Intersection(
        t, // time
        ray.origin + ray.direction * t, // position
        interpolated_normal, // normal
        face.material_id,
        true // is_normal_outward
    );
    if (dot(interpolated_normal, ray.direction) > 0.0) {
        interaction.normal = -interpolated_normal;
        interaction.is_normal_outward = false;
    }
    return true;
}

// MARK: * Scene
Intersection get_intersection_with_scene(
    Ray ray
) {
    Intersection inter;
    inter.time = ray.t_max + 1.0;
    for (uint i = 0; i < faces_len; i++) {
        Intersection new_inter;
        if (is_intersect_with_face(ray, faces.v[i], new_inter)) {
            if (new_inter.time <= ray.t_max) {
                ray.t_max = new_inter.time;
                inter = new_inter;
            }
        }
    }
    return inter;
}

// MARK: * Get Lighting Area

float get_face_area(in Face face) {
    vec3 v0 = vertices.v[face.indices.x].position;
    vec3 v1 = vertices.v[face.indices.y].position;
    vec3 v2 = vertices.v[face.indices.z].position;
    return 0.5 * length(cross(v1 - v0, v2 - v0));
}

// MARK: * Sample in Shapes

void sample_in_face(
    in Face face,
    out Intersection inter
) {
    vec3 v0 = vertices.v[face.indices.x].position;
    vec3 v1 = vertices.v[face.indices.y].position;
    vec3 v2 = vertices.v[face.indices.z].position;

    float x = sqrt(rand());
    float y = rand();

    inter = Intersection(
        0.0,
        (1.0 - x) * v0 + (x * (1.0 - y)) * v1 + (x * y) * v2, // MARK: = I dont get it =
        normalize(vertices.v[face.indices.x].normal),
        face.material_id,
        true
    );
}
// MARK: Func: Material Scatter

// PlaceHolder
// PlaceHolder
// PlaceHolder

// MARK: * Lambertian

vec3 lambertian_brdf_eval(
    in Material material,
    in vec3 wi,
    in vec3 wo,
    in vec3 normal
) {
    float cos_theta = dot(normal, wi);
    if (cos_theta > 0.0) {
        return material.albedo / PI;
    } else {
        return vec3(0.0);
    }
}

vec3 lambertian_brdf_sample(
    in vec3 normal
) {
    return random_in_unit_hemisphere_surface(normal);
}

float lambertian_brdf_pdf(
    in vec3 wi,
    in vec3 wo,
    in vec3 normal
) {
    // uniform sample probability = 1 / (2 * PI)
    return dot(wi, normal) > 0.0 ? 0.5 / PI : 0.0;
}

vec3 lambertian_brdf2_sample(
    in vec3 normal
) {
    return normalize(normal + random_in_unit_sphere_surface());
}

float lambertian_brdf2_pdf(
    in vec3 wi,
    in vec3 wo,
    in vec3 normal
) {
    // pdf = 1 / (2 * PI)
    // TODO: how to calculate the pdf
    float cos_theta = dot(normal, wi);
    return dot(wi, normal) > 0.0 ? 0.5 / PI : 0.0;
}

void sample_light_games101(
    out Intersection inter,
    out float pdf_light
) {
    // area
    float emit_area_sum = 0;
    for (uint i = 0; i < luminous_face_id_len; i++) {
        emit_area_sum += get_face_area(faces.v[luminous_face_id.v[i]]);
    }
    // sample
    float p = rand() * emit_area_sum;
    pdf_light = 1.0 / emit_area_sum;
    emit_area_sum = 0.0;
    for (uint i = 0; i < luminous_face_id_len; i++) {
        emit_area_sum += get_face_area(faces.v[luminous_face_id.v[i]]);
        if (p <= emit_area_sum) {
            sample_in_face(faces.v[luminous_face_id.v[i]], inter);
            return;
        }
    }
}

vec3 ray_trace_games101(
    Ray ray
) {
    vec3 color = vec3(0.0);
    vec3 attenuation = vec3(1.0);

    uint depth = 0;
    for (depth = 0; depth < MAX_BOUNCES; depth++) {

        if (
            attenuation.r < ATTENUATION_STOP_EPS
            && attenuation.g < ATTENUATION_STOP_EPS
            && attenuation.b < ATTENUATION_STOP_EPS
        ) { break; }

        Intersection inter_p = get_intersection_with_scene(ray);
        Material material_p = materials.v[inter_p.material_id];

        if (inter_p.time > ray.t_max) { color += vec3(0.1); break; }
        if (material_p.ty == MATERIAL_LIGHT) {
            if (depth == 0)
                color += attenuation * material_p.albedo;
            break;
        }

        vec3 p = inter_p.position;
        vec3 wo = -ray.direction;

        Intersection inter_x; // light
        float pdf_light;
        sample_light_games101(inter_x, pdf_light);
        Material material_x = materials.v[inter_x.material_id];
        float dist = length(inter_x.position - p);
        vec3 ws = (inter_x.position - p) / dist; // == normalize(inter_x.position - p)

        Intersection inter_x_blocked = get_intersection_with_scene(Ray(
            p + ws * EPS,
            ws,
            RAY_T_MIN,
            RAY_T_MAX
        ));
        float dist_blocked = length(inter_x_blocked.position - p);

        if (abs(dist - dist_blocked) < EPS) {
            color += attenuation
                     * material_x.albedo
                     * lambertian_brdf_eval(material_p, ws, wo, inter_p.normal)
                     * dot(inter_p.normal, ws)
                     * dot(inter_x.normal, -ws)
                     / (
                        pow(dist, 2.0)
                        * pdf_light
                    );
        }

        // 3. BRDF sampling
        if (rand() > RR_PROBABILITY) { break; }

        vec3 wi = lambertian_brdf_sample(inter_p.normal);
        attenuation *= 1.0
            * lambertian_brdf_eval(material_p, wi, wo, inter_p.normal)
            * dot(inter_p.normal, wi)
            / (
                max(0.1, lambertian_brdf_pdf(wi, wo, inter_p.normal))
                * RR_PROBABILITY
            );

        ray = Ray(
            inter_p.position + wi * EPS,
            wi,
            RAY_T_MIN,
            RAY_T_MAX
        );
    }

    return color;
}

// MARK: Main

void main() {
    vec2 window_size = vec2(imageSize(img));
    vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / window_size;
    srand(u_time, uv);

    Ray ray = sample_ray(uv, window_size);

    vec3 color = vec3(0.0);
    for (uint i = 0; i < SPP; i++) {
        color += ray_trace_games101(ray) / float(SPP);
    }

    color = pow(clamp(color, 0.0, 1.0), vec3(0.6));

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}